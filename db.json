{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/yilia/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/yilia/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/yilia/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/yilia/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/yilia/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/coderwall.png","path":"img/coderwall.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/delicious.png","path":"img/delicious.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/facebook.png","path":"img/facebook.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/douban.png","path":"img/douban.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/github.png","path":"img/github.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/google.png","path":"img/google.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/img-err.png","path":"img/img-err.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/linkedin.png","path":"img/linkedin.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/img-loading.png","path":"img/img-loading.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/mail.png","path":"img/mail.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/pinboard.png","path":"img/pinboard.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/pinterest.png","path":"img/pinterest.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/rss.png","path":"img/rss.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/stackoverflow.png","path":"img/stackoverflow.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/twitter.png","path":"img/twitter.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/weibo.png","path":"img/weibo.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/js/instagram.js","path":"js/instagram.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/zhihu.png","path":"img/zhihu.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/js/jquery.lazyload.js","path":"js/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/js/mobile.js","path":"js/mobile.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/js/pc.js","path":"js/pc.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.svgz","path":"css/fonts/fontawesome-webfont.svgz","modified":0,"renderable":1},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/yilia/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/yilia/.gitignore","hash":"0d5c2fdbdc974f10150baa12e1fc171a34960ed8","modified":1464834793557},{"_id":"themes/yilia/README.md","hash":"8648a81b3ae08a4accd6b0541533e662511e6400","modified":1464834792903},{"_id":"themes/yilia/_config.yml","hash":"305b61b62ed71df2be2930ff6381b40ac2478775","modified":1465281280567},{"_id":"themes/yilia/package.json","hash":"0199dfb3d44cf520b67464817d13c44a7766b8d6","modified":1464834793010},{"_id":"source/_posts/hello-world.md","hash":"e09c21ae826c8de10dad209cd846bab5e4bcf46b","modified":1465713643828},{"_id":"themes/yilia/languages/de.yml","hash":"bc80f78f61c3d7af9652e6aa6fc3e4ff39b0c8d3","modified":1464834792934},{"_id":"themes/yilia/languages/default.yml","hash":"f0a7a032b31555c9ec05a711e1ac19bb07724708","modified":1464834792955},{"_id":"themes/yilia/languages/en.yml","hash":"a093e794aef63ec9e9e9ef490cf7e4474e45e59f","modified":1464834792958},{"_id":"themes/yilia/languages/fr-FR.yml","hash":"04b9a0d80d88d01e039e8077afe88f741e9620ba","modified":1464834792961},{"_id":"themes/yilia/languages/ru.yml","hash":"62f84ea82a696060c481fc22d4742e6201bb9bdc","modified":1464834792964},{"_id":"themes/yilia/languages/zh-Hans.yml","hash":"d2336578e14bb880d152266981c2b17523fc8742","modified":1464834792966},{"_id":"themes/yilia/languages/zh-hk.yml","hash":"e702fc43556e54c396917bdf7c869d528742e28b","modified":1464834792969},{"_id":"themes/yilia/languages/zh-tw.yml","hash":"005559baa96b7bb34e1efe6b031829a95d58d5e0","modified":1464834792971},{"_id":"themes/yilia/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1464834793005},{"_id":"themes/yilia/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1464834793004},{"_id":"themes/yilia/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1464834793006},{"_id":"themes/yilia/layout/layout.ejs","hash":"3a4350f23a1286345f76c949466c97a7200dae8e","modified":1464834793007},{"_id":"themes/yilia/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1464834793007},{"_id":"themes/yilia/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1464834793008},{"_id":"themes/yilia/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1464834793009},{"_id":"themes/yilia/layout/_partial/after-footer.ejs","hash":"3709af4e8f7e1196dbd1f9dea62fa440d4b47836","modified":1464834792975},{"_id":"themes/yilia/layout/_partial/archive-post.ejs","hash":"5b29a383418cfdcf8d5c5719b4fc4608aaba6fe7","modified":1464834792977},{"_id":"themes/yilia/layout/_partial/article.ejs","hash":"420b94c78832456686ebd9831a5bfcb05365645a","modified":1464834792981},{"_id":"themes/yilia/layout/_partial/archive.ejs","hash":"a4eacc2bc1278095a0ef99f904b0634c78f980eb","modified":1464834792979},{"_id":"themes/yilia/layout/_partial/footer.ejs","hash":"871f81cacd5d41cb2eb001cd56254217a857dc2f","modified":1464834792983},{"_id":"themes/yilia/layout/_partial/google-analytics.ejs","hash":"1ccc627d7697e68fddc367c73ac09920457e5b35","modified":1464834792985},{"_id":"themes/yilia/layout/_partial/head.ejs","hash":"2bbf5aad03f54055d9d7852e70ff7e6952a41f26","modified":1464834792987},{"_id":"themes/yilia/layout/_partial/header.ejs","hash":"b69855e07b65117769adc515cb64b803932068c9","modified":1464834792989},{"_id":"themes/yilia/layout/_partial/mathjax.ejs","hash":"7be03a92dabeb2f94bf0e731d12a1c1146d736dd","modified":1464834792993},{"_id":"themes/yilia/layout/_partial/left-col.ejs","hash":"b03e8424b4798d4887801afdfae457fbf6027838","modified":1464834792991},{"_id":"themes/yilia/layout/_partial/mobile-nav.ejs","hash":"6a7a2a4960dabf9d7cd523573da7869eebf4b02d","modified":1464834792995},{"_id":"themes/yilia/source/css/.DS_Store","hash":"fc5a428fe40854a0ba66b4cea196c6700a57cae7","modified":1464834793013},{"_id":"themes/yilia/source/css/_extend.styl","hash":"8ab1ad313bd6707d248c5ca1ee9a5eab8d815e42","modified":1464834793013},{"_id":"themes/yilia/source/css/_variables.styl","hash":"8b63ea3c7199524b9a1541075c6f8fb2c0d0ea3d","modified":1464834793037},{"_id":"themes/yilia/source/css/style.styl","hash":"456e8cfe3b0b0371e81848ea9b0bc7ffd5360921","modified":1464834793037},{"_id":"themes/yilia/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1464834793101},{"_id":"themes/yilia/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1464834793145},{"_id":"themes/yilia/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1464834793128},{"_id":"themes/yilia/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1464834793216},{"_id":"themes/yilia/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1464834793245},{"_id":"themes/yilia/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1464834793346},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.css","hash":"96138eaddfbd305160ddcb98a5f08555ca6cb4ee","modified":1464834793438},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.pack.js","hash":"2da892a02778236b64076e5e8802ef0566e1d9e8","modified":1464834793437},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.js","hash":"004bb0812414554ab48067792f09e978603253b6","modified":1464834793422},{"_id":"themes/yilia/source/img/coderwall.png","hash":"fa84676c4d654e040e51fd34bfcd9f9348cd5331","modified":1464834793441},{"_id":"themes/yilia/source/img/delicious.png","hash":"9553a5f5189e4a953e04a58a49dbfa74b86b73dd","modified":1464834793446},{"_id":"themes/yilia/source/img/facebook.png","hash":"d19ad7a0903daf26817afd8753cd97e0cc714f54","modified":1464834793463},{"_id":"themes/yilia/source/img/douban.png","hash":"e2ade003ffadd5826ee66ec23901c2d6e8607e4e","modified":1464834793455},{"_id":"themes/yilia/source/img/github.png","hash":"b84d03b32fa388dcbf149296ebd16dce6223d48d","modified":1464834793465},{"_id":"themes/yilia/source/img/google.png","hash":"61a21fec7346fa3400b747ac9a201cf3d5bc013d","modified":1464834793472},{"_id":"themes/yilia/source/img/img-err.png","hash":"23a63ea26eb3c1d5e677d9883cf36cc1a1a1228b","modified":1464834793480},{"_id":"themes/yilia/source/img/linkedin.png","hash":"e203138fb53c257cb214e97f4e30091b9c568d2c","modified":1464834793496},{"_id":"themes/yilia/source/img/img-loading.png","hash":"a9cd5cd11866824f31e3d1c5e23badfeb3f73031","modified":1464834793488},{"_id":"themes/yilia/source/img/mail.png","hash":"fca8199cc77fdbd700a45bf56d091c82f4a67fe7","modified":1464834793505},{"_id":"themes/yilia/source/img/pinboard.png","hash":"0891fbb6d092fa012bf936019923383d84c6aeb0","modified":1464834793507},{"_id":"themes/yilia/source/img/pinterest.png","hash":"9c72917f8779c083157c6ce7a5d62ed4874f0630","modified":1464834793513},{"_id":"themes/yilia/source/img/rss.png","hash":"430fd47340e75214c081abd05cd7410cf7c71b86","modified":1464834793514},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1464834793516},{"_id":"themes/yilia/source/img/stackoverflow.png","hash":"da5dfe9043055c95e479d49c78cd3b020de608f2","modified":1464834793518},{"_id":"themes/yilia/source/img/twitter.png","hash":"14dbb8e62d056525253bc0de13acd1723da7a934","modified":1464834793521},{"_id":"themes/yilia/source/img/weibo.png","hash":"280dae3fd38086158b4a1b57edb94c06b1a5014b","modified":1464834793523},{"_id":"themes/yilia/source/js/instagram.js","hash":"81e13cacf4947118ed1920e59b04ccf6beef6b86","modified":1464834793555},{"_id":"themes/yilia/source/img/zhihu.png","hash":"a6d6ef65e9ac82e613a311810391ebb90d9b1c1d","modified":1464834793525},{"_id":"themes/yilia/source/js/jquery.lazyload.js","hash":"9c34c37b4dca82386648d364da913153d1db902e","modified":1464834793527},{"_id":"themes/yilia/source/js/main.js","hash":"e2633f282e377a4169649c9f17dc96036ad4fc64","modified":1464834793529},{"_id":"themes/yilia/source/js/mobile.js","hash":"387c047e661f04fbb5f5bfc4b2db617023e836ce","modified":1464834793545},{"_id":"themes/yilia/source/js/pc.js","hash":"a5397d34a04084ee089b4b1e26457ab46ecea63e","modified":1464834793547},{"_id":"themes/yilia/layout/_partial/post/category.ejs","hash":"27fab3e6ccc41c075dc4c5ba3ca9e7f3b6247945","modified":1464834792996},{"_id":"themes/yilia/layout/_partial/post/date.ejs","hash":"06d8914b5aef73b5ec2cabb0105e275ff821b321","modified":1464834792998},{"_id":"themes/yilia/layout/_partial/post/duoshuo.ejs","hash":"f6b4c4eaafb5ac386273354b5f64a26139b7a3b0","modified":1464834792999},{"_id":"themes/yilia/layout/_partial/post/nav.ejs","hash":"c115c282eebfb6b18612d2d8733272c270b03066","modified":1464834793000},{"_id":"themes/yilia/layout/_partial/post/share_addthis.ejs","hash":"4ab6cab2a975a4df8419448b33dec4724279d85c","modified":1464834793001},{"_id":"themes/yilia/layout/_partial/post/share_jia.ejs","hash":"d50294bf9858e7942208c380e851a37ed37f1d6f","modified":1464834793002},{"_id":"themes/yilia/layout/_partial/post/tag.ejs","hash":"acf1b9d79ccec172881f9f0080e96667f4178885","modified":1464834793004},{"_id":"themes/yilia/layout/_partial/post/title.ejs","hash":"d4a460a35e2112d0c7414fd5e19b3a16093f1caf","modified":1464834793003},{"_id":"themes/yilia/source/css/_util/grid.styl","hash":"1aa883ab432d9e4139c89dcbd40ae2bd1528d029","modified":1464834793036},{"_id":"themes/yilia/source/css/_util/mixin.styl","hash":"429bad87fc156eacf226c5e35b0eafc277f2504b","modified":1464834793036},{"_id":"themes/yilia/source/css/_partial/archive.styl","hash":"8b349f1605024dcdae054e04f02d71a2e84957c2","modified":1464834793014},{"_id":"themes/yilia/source/css/_partial/article.styl","hash":"872fc4e63509fef885c939e5fd70e6ed439beced","modified":1464834793015},{"_id":"themes/yilia/source/css/_partial/footer.styl","hash":"7ca837a4cc34db1c35f01baec85eb10ccc64ea86","modified":1464834793016},{"_id":"themes/yilia/source/css/_partial/header.styl","hash":"67e59feb18eee6026717cb440d86ab9551782628","modified":1464834793019},{"_id":"themes/yilia/source/css/_partial/highlight.styl","hash":"08d3205dde3235f3e6881126268e6c473f46a8ac","modified":1464834793022},{"_id":"themes/yilia/source/css/_partial/instagram.styl","hash":"8a7b07bf5ea2d3588c0019f722c245bb1a8696af","modified":1464834793023},{"_id":"themes/yilia/source/css/_partial/main.styl","hash":"c368f1533053d4cffdf0ad982603271400b08e33","modified":1464834793023},{"_id":"themes/yilia/source/css/_partial/mobile-slider.styl","hash":"e19c7fae6968ad3ea6cfc110900a991f9b5fce31","modified":1464834793024},{"_id":"themes/yilia/source/css/_partial/mobile.styl","hash":"3a03b04ef8ac305aa5dbf7b9db99cd9377d07383","modified":1464834793032},{"_id":"themes/yilia/source/css/_partial/page.styl","hash":"720b5b169bc28ccba3794efce9b7cd39f243dec7","modified":1464834793032},{"_id":"themes/yilia/source/css/_partial/scroll.styl","hash":"5539a38f9acd603d453a0ea0d8ce10893cf83d22","modified":1464834793033},{"_id":"themes/yilia/source/css/_partial/share.styl","hash":"22697b9a9877ab9f018364feb57aeea4a8313c9a","modified":1464834793033},{"_id":"themes/yilia/source/css/_partial/tagcloud.styl","hash":"af0115de5c6455f899a2e09225b50224982c039d","modified":1464834793035},{"_id":"themes/yilia/source/css/_partial/wheelmenu.styl","hash":"9e57421eab562ea13d0ed2b2e1415eee79fa23d0","modified":1464834793035},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.eot","hash":"3ce87b82c7a4ffdf65e96765c2ffda10b1a283c6","modified":1464834793040},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.svgz","hash":"4bfdd33ed702e32ae01399fcc2652377f78e7626","modified":1464834793043},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.woff","hash":"cafc4ac5761a0a252d33dce4ea3952cf9a38d832","modified":1464834793098},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.ttf","hash":"1480b8101b02da9bc4c60341b5e185e63e585064","modified":1464834793096},{"_id":"themes/yilia/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1464834793371},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1464834793379},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"4c9c395d705d22af7da06870d18f434e2a2eeaf9","modified":1464834793388},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-media.js","hash":"e14c32cc6823b81b2f758512f13ed8eb9ef2b454","modified":1464834793403},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1464834793413},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"83cdfea43632b613771691a11f56f99d85fb6dbd","modified":1464834793421},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.svg","hash":"ba13657479b46daecb6336bfe376f84cef3ae58b","modified":1464834793041},{"_id":"source/_posts/100-SameTree.md","hash":"0b62f0b22ff7230c61c9d658aee98eade459af10","modified":1465695912067},{"_id":"source/_posts/104-MaximumDepthofBinaryTree.md","hash":"db5984cc4c087928439bee8799b8ad41894f8c4b","modified":1465291010372},{"_id":"source/_posts/169-MajorityElement.md","hash":"88e04036a31aee88e573ea51ae13e8635d9b0898","modified":1465697375846},{"_id":"source/_posts/13-RomantoInteger.md","hash":"b95dcb4a55fd8f39b09918a96cea7b3eb45bee78","modified":1465712045886},{"_id":"source/_posts/171-ExcelSheetColumnNumber.md","hash":"de9384ca79f13262d0802fa8b8e7e19626ffe169","modified":1465695962285},{"_id":"source/_posts/206-ReverseLinkedList.md","hash":"492e01ea943cd0eeeba047cb02b2069b86c59f00","modified":1465699054722},{"_id":"source/_posts/217-ContainsDuplicate.md","hash":"94bd74197f711d1b5d3315c553f5bfc669471563","modified":1465697499326},{"_id":"source/_posts/226-InvertBinaryTree.md","hash":"04842343fa19ff0724ebbecb06694dae75510545","modified":1465379291054},{"_id":"source/_posts/237-DeleteNodeinaLinkedList.md","hash":"2119b037b8614a3bc5ccd082aea05c9d084b62b4","modified":1465695746166},{"_id":"source/_posts/242-ValidAnagram.md","hash":"c192b241b2c60c7c39d9bea152a903fb10b40244","modified":1465695760258},{"_id":"source/_posts/258-AddDigits.md","hash":"ccd94c7999c83b114653425083839d5054d9e7dc","modified":1465290996876},{"_id":"source/_posts/283-MoveZeroes.md","hash":"16c8aa917209d8ce6d4a0161c75fc1730fe9728c","modified":1465357274444},{"_id":"source/_posts/292-NimGame.md","hash":"cb67697d8ad1a965667fc4718bd449ef9be93152","modified":1465290988464},{"_id":"source/_posts/test.md","hash":"f6fc8ad0f530b8d63b731c8ea7115035dcd0dc19","modified":1465713394498}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"Hello World","date":"2016-05-30T06:28:15.000Z","_content":"\n你好，世界！！\n\n第一篇blog以hello world为开头只是一种传统，你懂的，哈哈。\n\n\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\ndate: 2016-05-30 14:28:15\ntags:\n---\n\n你好，世界！！\n\n第一篇blog以hello world为开头只是一种传统，你懂的，哈哈。\n\n\n","slug":"hello-world","published":1,"updated":"2016-06-12T06:40:43.828Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cipc8jb3a0000tgxo8o79efr8","content":"<p>你好，世界！！</p>\n<p>第一篇blog以hello world为开头只是一种传统，你懂的，哈哈。</p>\n","excerpt":"","more":"<p>你好，世界！！</p>\n<p>第一篇blog以hello world为开头只是一种传统，你懂的，哈哈。</p>\n"},{"title":"100. Same Tree","date":"2016-06-08T07:07:01.000Z","_content":"\n>Given two binary trees, write a function to check if they are equal or not.\n\n>Two binary trees are considered equal if they are structurally identical and the nodes have the same value.\n\n\n**1. 递归方式**\n\n```c++\nclass Solution {\npublic:\n    bool isSameTree(TreeNode* p, TreeNode* q) {\n        if (p == NULL && q == NULL)\n            return true;\n        else if (p == NULL && q != NULL || (p != NULL && q == NULL))\n            return false;\n\n        if (q->val != p->val)\n            return false;\n\n        if ( ! (isSameTree(p->left,q->left) && isSameTree(p->right,q->right)))\n            return false;\n        return true;\n    }\n};\n```\n\n**2.非递归广度遍历**\n\n```c++\nclass Solution {\npublic:\n    bool isSameTree(TreeNode* p, TreeNode* q) {\n        if (p == NULL && q == NULL)\n            return true;\n        else if (p == NULL && q != NULL || (p != NULL && q == NULL))\n            return false;\n\n        queue<TreeNode *> pQueue;\n        queue<TreeNode *> qQueue;\n\n        pQueue.push(p);\n        qQueue.push(q);\n        bool result = true;\n        while ((! pQueue.empty()) && (! qQueue.empty()))\n        {\n            if (pQueue.size() != qQueue.size())\n            {\n                result = false;\n                break;\n            }\n\n            TreeNode *pNode = pQueue.front();\n            TreeNode *qNode = qQueue.front();\n            pQueue.pop();\n            qQueue.pop();\n            if ((pNode->val != qNode->val)\n                || (pNode->left == NULL && qNode->left != NULL)\n                || (pNode->left != NULL && qNode->left == NULL)\n                || (pNode->right == NULL && qNode->right != NULL)\n                || (pNode->right != NULL && qNode->right == NULL))\n            {\n                result = false;\n                break;\n            }\n\n            if (pNode->left != NULL)\n                pQueue.push(pNode->left);\n                \n            if (qNode->left != NULL)\n                qQueue.push(qNode->left);\n\n            if (pNode->right != NULL)\n                pQueue.push(pNode->right);\n\n            if (qNode->right != NULL)\n                qQueue.push(qNode->right);\n        }\n        \n        if (result && (!pQueue.empty() || !qQueue.empty()))\n            result = false;\n\n        return result;\n\n#endif\n    }\n};\n```","source":"_posts/100-SameTree.md","raw":"---\ntitle: 100. Same Tree\ndate: 2016-06-08 15:07:01\ntags: leetcode\n---\n\n>Given two binary trees, write a function to check if they are equal or not.\n\n>Two binary trees are considered equal if they are structurally identical and the nodes have the same value.\n\n\n**1. 递归方式**\n\n```c++\nclass Solution {\npublic:\n    bool isSameTree(TreeNode* p, TreeNode* q) {\n        if (p == NULL && q == NULL)\n            return true;\n        else if (p == NULL && q != NULL || (p != NULL && q == NULL))\n            return false;\n\n        if (q->val != p->val)\n            return false;\n\n        if ( ! (isSameTree(p->left,q->left) && isSameTree(p->right,q->right)))\n            return false;\n        return true;\n    }\n};\n```\n\n**2.非递归广度遍历**\n\n```c++\nclass Solution {\npublic:\n    bool isSameTree(TreeNode* p, TreeNode* q) {\n        if (p == NULL && q == NULL)\n            return true;\n        else if (p == NULL && q != NULL || (p != NULL && q == NULL))\n            return false;\n\n        queue<TreeNode *> pQueue;\n        queue<TreeNode *> qQueue;\n\n        pQueue.push(p);\n        qQueue.push(q);\n        bool result = true;\n        while ((! pQueue.empty()) && (! qQueue.empty()))\n        {\n            if (pQueue.size() != qQueue.size())\n            {\n                result = false;\n                break;\n            }\n\n            TreeNode *pNode = pQueue.front();\n            TreeNode *qNode = qQueue.front();\n            pQueue.pop();\n            qQueue.pop();\n            if ((pNode->val != qNode->val)\n                || (pNode->left == NULL && qNode->left != NULL)\n                || (pNode->left != NULL && qNode->left == NULL)\n                || (pNode->right == NULL && qNode->right != NULL)\n                || (pNode->right != NULL && qNode->right == NULL))\n            {\n                result = false;\n                break;\n            }\n\n            if (pNode->left != NULL)\n                pQueue.push(pNode->left);\n                \n            if (qNode->left != NULL)\n                qQueue.push(qNode->left);\n\n            if (pNode->right != NULL)\n                pQueue.push(pNode->right);\n\n            if (qNode->right != NULL)\n                qQueue.push(qNode->right);\n        }\n        \n        if (result && (!pQueue.empty() || !qQueue.empty()))\n            result = false;\n\n        return result;\n\n#endif\n    }\n};\n```","slug":"100-SameTree","published":1,"updated":"2016-06-12T01:45:12.067Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cipc8kw13000034xowxecct5j","content":"<blockquote>\n<p>Given two binary trees, write a function to check if they are equal or not.</p>\n<p>Two binary trees are considered equal if they are structurally identical and the nodes have the same value.</p>\n</blockquote>\n<p><strong>1. 递归方式</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> Solution &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">isSameTree</span><span class=\"params\">(TreeNode* p, TreeNode* q)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (p == <span class=\"literal\">NULL</span> &amp;&amp; q == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (p == <span class=\"literal\">NULL</span> &amp;&amp; q != <span class=\"literal\">NULL</span> || (p != <span class=\"literal\">NULL</span> &amp;&amp; q == <span class=\"literal\">NULL</span>))</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (q-&gt;val != p-&gt;val)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ( ! (isSameTree(p-&gt;left,q-&gt;left) &amp;&amp; isSameTree(p-&gt;right,q-&gt;right)))</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p><strong>2.非递归广度遍历</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> Solution &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">isSameTree</span><span class=\"params\">(TreeNode* p, TreeNode* q)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (p == <span class=\"literal\">NULL</span> &amp;&amp; q == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (p == <span class=\"literal\">NULL</span> &amp;&amp; q != <span class=\"literal\">NULL</span> || (p != <span class=\"literal\">NULL</span> &amp;&amp; q == <span class=\"literal\">NULL</span>))</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">queue</span>&lt;TreeNode *&gt; pQueue;</span><br><span class=\"line\">        <span class=\"built_in\">queue</span>&lt;TreeNode *&gt; qQueue;</span><br><span class=\"line\"></span><br><span class=\"line\">        pQueue.push(p);</span><br><span class=\"line\">        qQueue.push(q);</span><br><span class=\"line\">        <span class=\"keyword\">bool</span> result = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> ((! pQueue.empty()) &amp;&amp; (! qQueue.empty()))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (pQueue.size() != qQueue.size())</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                result = <span class=\"literal\">false</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            TreeNode *pNode = pQueue.front();</span><br><span class=\"line\">            TreeNode *qNode = qQueue.front();</span><br><span class=\"line\">            pQueue.pop();</span><br><span class=\"line\">            qQueue.pop();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> ((pNode-&gt;val != qNode-&gt;val)</span><br><span class=\"line\">                || (pNode-&gt;left == <span class=\"literal\">NULL</span> &amp;&amp; qNode-&gt;left != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">                || (pNode-&gt;left != <span class=\"literal\">NULL</span> &amp;&amp; qNode-&gt;left == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">                || (pNode-&gt;right == <span class=\"literal\">NULL</span> &amp;&amp; qNode-&gt;right != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">                || (pNode-&gt;right != <span class=\"literal\">NULL</span> &amp;&amp; qNode-&gt;right == <span class=\"literal\">NULL</span>))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                result = <span class=\"literal\">false</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (pNode-&gt;left != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">                pQueue.push(pNode-&gt;left);</span><br><span class=\"line\">                </span><br><span class=\"line\">            <span class=\"keyword\">if</span> (qNode-&gt;left != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">                qQueue.push(qNode-&gt;left);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (pNode-&gt;right != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">                pQueue.push(pNode-&gt;right);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (qNode-&gt;right != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">                qQueue.push(qNode-&gt;right);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (result &amp;&amp; (!pQueue.empty() || !qQueue.empty()))</span><br><span class=\"line\">            result = <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>","excerpt":"","more":"<blockquote>\n<p>Given two binary trees, write a function to check if they are equal or not.</p>\n<p>Two binary trees are considered equal if they are structurally identical and the nodes have the same value.</p>\n</blockquote>\n<p><strong>1. 递归方式</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> Solution &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">isSameTree</span><span class=\"params\">(TreeNode* p, TreeNode* q)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (p == <span class=\"literal\">NULL</span> &amp;&amp; q == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (p == <span class=\"literal\">NULL</span> &amp;&amp; q != <span class=\"literal\">NULL</span> || (p != <span class=\"literal\">NULL</span> &amp;&amp; q == <span class=\"literal\">NULL</span>))</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (q-&gt;val != p-&gt;val)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ( ! (isSameTree(p-&gt;left,q-&gt;left) &amp;&amp; isSameTree(p-&gt;right,q-&gt;right)))</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p><strong>2.非递归广度遍历</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> Solution &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">isSameTree</span><span class=\"params\">(TreeNode* p, TreeNode* q)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (p == <span class=\"literal\">NULL</span> &amp;&amp; q == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (p == <span class=\"literal\">NULL</span> &amp;&amp; q != <span class=\"literal\">NULL</span> || (p != <span class=\"literal\">NULL</span> &amp;&amp; q == <span class=\"literal\">NULL</span>))</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">queue</span>&lt;TreeNode *&gt; pQueue;</span><br><span class=\"line\">        <span class=\"built_in\">queue</span>&lt;TreeNode *&gt; qQueue;</span><br><span class=\"line\"></span><br><span class=\"line\">        pQueue.push(p);</span><br><span class=\"line\">        qQueue.push(q);</span><br><span class=\"line\">        <span class=\"keyword\">bool</span> result = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> ((! pQueue.empty()) &amp;&amp; (! qQueue.empty()))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (pQueue.size() != qQueue.size())</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                result = <span class=\"literal\">false</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            TreeNode *pNode = pQueue.front();</span><br><span class=\"line\">            TreeNode *qNode = qQueue.front();</span><br><span class=\"line\">            pQueue.pop();</span><br><span class=\"line\">            qQueue.pop();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> ((pNode-&gt;val != qNode-&gt;val)</span><br><span class=\"line\">                || (pNode-&gt;left == <span class=\"literal\">NULL</span> &amp;&amp; qNode-&gt;left != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">                || (pNode-&gt;left != <span class=\"literal\">NULL</span> &amp;&amp; qNode-&gt;left == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">                || (pNode-&gt;right == <span class=\"literal\">NULL</span> &amp;&amp; qNode-&gt;right != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">                || (pNode-&gt;right != <span class=\"literal\">NULL</span> &amp;&amp; qNode-&gt;right == <span class=\"literal\">NULL</span>))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                result = <span class=\"literal\">false</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (pNode-&gt;left != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">                pQueue.push(pNode-&gt;left);</span><br><span class=\"line\">                </span><br><span class=\"line\">            <span class=\"keyword\">if</span> (qNode-&gt;left != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">                qQueue.push(qNode-&gt;left);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (pNode-&gt;right != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">                pQueue.push(pNode-&gt;right);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (qNode-&gt;right != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">                qQueue.push(qNode-&gt;right);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (result &amp;&amp; (!pQueue.empty() || !qQueue.empty()))</span><br><span class=\"line\">            result = <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>"},{"title":"104 Maximum Depth of Binary Tree","date":"2016-06-07T08:39:03.000Z","_content":"\n>Given a binary tree, find its maximum depth.\n\n>The maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.\n\n\n**1. 深度遍历**\n\n```c++\nclass Solution {\npublic:\n    int maxDepth(TreeNode* root) {\n        if (root == NULL)\n            return 0;\n        return max(maxDepth(root->left),maxDepth(root->right)) + 1;\n    }\n};\n```\n\n**2. 广度遍历**\n\n```c++\nclass Solution {\npublic:\n    int maxDepth(TreeNode *root)\n    {\n        if (root == NULL)\n            return 0;\n            \n        queue<TreeNode *> p;\n        p.push(root);\n        int depth = 0;\n        while (!p.empty())\n        {\n            depth++;\n            int count = p.size();\n            for (int i = 0; i < count; i++)\n            {\n                TreeNode *tmp = p.front();\n                if (tmp->left != NULL)\n                    p.push(tmp->left);\n                \n                if (tmp->right != NULL)\n                    p.push(tmp->right);\n                p.pop();\n            }\n            \n        }\n        return depth;\n    }\n};\n```\n","source":"_posts/104-MaximumDepthofBinaryTree.md","raw":"---\ntitle: 104 Maximum Depth of Binary Tree\ndate: 2016-06-07 16:39:03\ntags: leetcode\n---\n\n>Given a binary tree, find its maximum depth.\n\n>The maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.\n\n\n**1. 深度遍历**\n\n```c++\nclass Solution {\npublic:\n    int maxDepth(TreeNode* root) {\n        if (root == NULL)\n            return 0;\n        return max(maxDepth(root->left),maxDepth(root->right)) + 1;\n    }\n};\n```\n\n**2. 广度遍历**\n\n```c++\nclass Solution {\npublic:\n    int maxDepth(TreeNode *root)\n    {\n        if (root == NULL)\n            return 0;\n            \n        queue<TreeNode *> p;\n        p.push(root);\n        int depth = 0;\n        while (!p.empty())\n        {\n            depth++;\n            int count = p.size();\n            for (int i = 0; i < count; i++)\n            {\n                TreeNode *tmp = p.front();\n                if (tmp->left != NULL)\n                    p.push(tmp->left);\n                \n                if (tmp->right != NULL)\n                    p.push(tmp->right);\n                p.pop();\n            }\n            \n        }\n        return depth;\n    }\n};\n```\n","slug":"104-MaximumDepthofBinaryTree","published":1,"updated":"2016-06-07T09:16:50.372Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cipc8kw1d000134xooiex1phz","content":"<blockquote>\n<p>Given a binary tree, find its maximum depth.</p>\n<p>The maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.</p>\n</blockquote>\n<p><strong>1. 深度遍历</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> Solution &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">maxDepth</span><span class=\"params\">(TreeNode* root)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> max(maxDepth(root-&gt;left),maxDepth(root-&gt;right)) + <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p><strong>2. 广度遍历</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> Solution &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">maxDepth</span><span class=\"params\">(TreeNode *root)</span></span><br><span class=\"line\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">            </span><br><span class=\"line\">        <span class=\"built_in\">queue</span>&lt;TreeNode *&gt; p;</span><br><span class=\"line\">        p.push(root);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> depth = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!p.empty())</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            depth++;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> count = p.size();</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                TreeNode *tmp = p.front();</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (tmp-&gt;left != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">                    p.push(tmp-&gt;left);</span><br><span class=\"line\">                </span><br><span class=\"line\">                <span class=\"keyword\">if</span> (tmp-&gt;right != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">                    p.push(tmp-&gt;right);</span><br><span class=\"line\">                p.pop();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> depth;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<blockquote>\n<p>Given a binary tree, find its maximum depth.</p>\n<p>The maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.</p>\n</blockquote>\n<p><strong>1. 深度遍历</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> Solution &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">maxDepth</span><span class=\"params\">(TreeNode* root)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> max(maxDepth(root-&gt;left),maxDepth(root-&gt;right)) + <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p><strong>2. 广度遍历</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> Solution &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">maxDepth</span><span class=\"params\">(TreeNode *root)</span></span><br><span class=\"line\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">            </span><br><span class=\"line\">        <span class=\"built_in\">queue</span>&lt;TreeNode *&gt; p;</span><br><span class=\"line\">        p.push(root);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> depth = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!p.empty())</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            depth++;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> count = p.size();</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                TreeNode *tmp = p.front();</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (tmp-&gt;left != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">                    p.push(tmp-&gt;left);</span><br><span class=\"line\">                </span><br><span class=\"line\">                <span class=\"keyword\">if</span> (tmp-&gt;right != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">                    p.push(tmp-&gt;right);</span><br><span class=\"line\">                p.pop();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> depth;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n"},{"title":"13. Roman to Integer","date":"2016-06-12T02:41:04.000Z","_content":"\n>Given a roman numeral, convert it to an integer.\n\n>Input is guaranteed to be within the range from 1 to 3999.\n\n题目分析：\n \n罗马数字是最古老的数字表示方式，比阿拉伯数组早2000多年，起源于罗马 \n罗马数字有如下符号： \n基本字符\t        I\tV\tX\tL\tC\tD\tM\n对应阿拉伯数字\t1\t5\t10\t50\t100\t500\t1000\n计数规则： \n* 相同的数字连写，所表示的数等于这些数字相加得到的数，例如：III = 3\n* 小的数字在大的数字右边，所表示的数等于这些数字相加得到的数，例如：VIII = 8\n* 小的数字，限于（I、X和C）在大的数字左边，所表示的数等于大数减去小数所得的数，例如：IV = 4\n* 正常使用时，连续的数字重复不得超过三次在一个数的上面画横线，表示这个数扩大1000倍（本题只考虑3999以内的数，所以用不到这条规则） \n其次，罗马数字转阿拉伯数字规则（仅限于3999以内）： \n从前向后遍历罗马数字，如果某个数比前一个数小，则加上该数。反之，减去前一个数的两倍然后加上该数 \n\n```c++\nclass Solution {\npublic:\n    int getRomanValue(char c)\n    {\n        switch(c)\n        {\n            case 'I':\n                return 1;\n            case 'V':\n                return 5;\n            case 'X':\n                return 10;\n            case 'L':\n                return 50;\n            case 'C':\n                return 100;\n            case 'D':\n                return 500;\n            case 'M':\n                return 1000;\n        }\n        return 0;\n    }\n    int romanToInt(string s) {\n        int num = 0;\n        if (s.empty())\n            return num;\n        \n        num = getRomanValue(s[0]);\n        for (int i = 1; i < s.size(); i++)\n        {\n            int pre = getRomanValue(s[i - 1]);\n            int cur = getRomanValue(s[i]);\n            if (cur > pre)\n                num += cur - 2 * pre;\n            else\n                num += cur;\n        }\n        return num;\n    }\n};\n```\n","source":"_posts/13-RomantoInteger.md","raw":"---\ntitle: 13. Roman to Integer\ndate: 2016-06-12 10:41:04\ntags: leetcode\n---\n\n>Given a roman numeral, convert it to an integer.\n\n>Input is guaranteed to be within the range from 1 to 3999.\n\n题目分析：\n \n罗马数字是最古老的数字表示方式，比阿拉伯数组早2000多年，起源于罗马 \n罗马数字有如下符号： \n基本字符\t        I\tV\tX\tL\tC\tD\tM\n对应阿拉伯数字\t1\t5\t10\t50\t100\t500\t1000\n计数规则： \n* 相同的数字连写，所表示的数等于这些数字相加得到的数，例如：III = 3\n* 小的数字在大的数字右边，所表示的数等于这些数字相加得到的数，例如：VIII = 8\n* 小的数字，限于（I、X和C）在大的数字左边，所表示的数等于大数减去小数所得的数，例如：IV = 4\n* 正常使用时，连续的数字重复不得超过三次在一个数的上面画横线，表示这个数扩大1000倍（本题只考虑3999以内的数，所以用不到这条规则） \n其次，罗马数字转阿拉伯数字规则（仅限于3999以内）： \n从前向后遍历罗马数字，如果某个数比前一个数小，则加上该数。反之，减去前一个数的两倍然后加上该数 \n\n```c++\nclass Solution {\npublic:\n    int getRomanValue(char c)\n    {\n        switch(c)\n        {\n            case 'I':\n                return 1;\n            case 'V':\n                return 5;\n            case 'X':\n                return 10;\n            case 'L':\n                return 50;\n            case 'C':\n                return 100;\n            case 'D':\n                return 500;\n            case 'M':\n                return 1000;\n        }\n        return 0;\n    }\n    int romanToInt(string s) {\n        int num = 0;\n        if (s.empty())\n            return num;\n        \n        num = getRomanValue(s[0]);\n        for (int i = 1; i < s.size(); i++)\n        {\n            int pre = getRomanValue(s[i - 1]);\n            int cur = getRomanValue(s[i]);\n            if (cur > pre)\n                num += cur - 2 * pre;\n            else\n                num += cur;\n        }\n        return num;\n    }\n};\n```\n","slug":"13-RomantoInteger","published":1,"updated":"2016-06-12T06:14:05.886Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cipc8kw1k000334xo0aptvihr","content":"<blockquote>\n<p>Given a roman numeral, convert it to an integer.</p>\n<p>Input is guaranteed to be within the range from 1 to 3999.</p>\n</blockquote>\n<p>题目分析：</p>\n<p>罗马数字是最古老的数字表示方式，比阿拉伯数组早2000多年，起源于罗马<br>罗马数字有如下符号：<br>基本字符            I    V    X    L    C    D    M<br>对应阿拉伯数字    1    5    10    50    100    500    1000<br>计数规则： </p>\n<ul>\n<li>相同的数字连写，所表示的数等于这些数字相加得到的数，例如：III = 3</li>\n<li>小的数字在大的数字右边，所表示的数等于这些数字相加得到的数，例如：VIII = 8</li>\n<li>小的数字，限于（I、X和C）在大的数字左边，所表示的数等于大数减去小数所得的数，例如：IV = 4</li>\n<li>正常使用时，连续的数字重复不得超过三次在一个数的上面画横线，表示这个数扩大1000倍（本题只考虑3999以内的数，所以用不到这条规则）<br>其次，罗马数字转阿拉伯数字规则（仅限于3999以内）：<br>从前向后遍历罗马数字，如果某个数比前一个数小，则加上该数。反之，减去前一个数的两倍然后加上该数 </li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> Solution &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getRomanValue</span><span class=\"params\">(<span class=\"keyword\">char</span> c)</span></span><br><span class=\"line\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span>(c)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">'I'</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">'V'</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">5</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">'X'</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">10</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">'L'</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">50</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">'C'</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">100</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">'D'</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">500</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">'M'</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">1000</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">romanToInt</span><span class=\"params\">(<span class=\"built_in\">string</span> s)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> num = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (s.empty())</span><br><span class=\"line\">            <span class=\"keyword\">return</span> num;</span><br><span class=\"line\">        </span><br><span class=\"line\">        num = getRomanValue(s[<span class=\"number\">0</span>]);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; s.size(); i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> pre = getRomanValue(s[i - <span class=\"number\">1</span>]);</span><br><span class=\"line\">            <span class=\"keyword\">int</span> cur = getRomanValue(s[i]);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (cur &gt; pre)</span><br><span class=\"line\">                num += cur - <span class=\"number\">2</span> * pre;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">                num += cur;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> num;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<blockquote>\n<p>Given a roman numeral, convert it to an integer.</p>\n<p>Input is guaranteed to be within the range from 1 to 3999.</p>\n</blockquote>\n<p>题目分析：</p>\n<p>罗马数字是最古老的数字表示方式，比阿拉伯数组早2000多年，起源于罗马<br>罗马数字有如下符号：<br>基本字符            I    V    X    L    C    D    M<br>对应阿拉伯数字    1    5    10    50    100    500    1000<br>计数规则： </p>\n<ul>\n<li>相同的数字连写，所表示的数等于这些数字相加得到的数，例如：III = 3</li>\n<li>小的数字在大的数字右边，所表示的数等于这些数字相加得到的数，例如：VIII = 8</li>\n<li>小的数字，限于（I、X和C）在大的数字左边，所表示的数等于大数减去小数所得的数，例如：IV = 4</li>\n<li>正常使用时，连续的数字重复不得超过三次在一个数的上面画横线，表示这个数扩大1000倍（本题只考虑3999以内的数，所以用不到这条规则）<br>其次，罗马数字转阿拉伯数字规则（仅限于3999以内）：<br>从前向后遍历罗马数字，如果某个数比前一个数小，则加上该数。反之，减去前一个数的两倍然后加上该数 </li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> Solution &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getRomanValue</span><span class=\"params\">(<span class=\"keyword\">char</span> c)</span></span><br><span class=\"line\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span>(c)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">'I'</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">'V'</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">5</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">'X'</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">10</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">'L'</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">50</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">'C'</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">100</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">'D'</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">500</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">'M'</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">1000</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">romanToInt</span><span class=\"params\">(<span class=\"built_in\">string</span> s)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> num = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (s.empty())</span><br><span class=\"line\">            <span class=\"keyword\">return</span> num;</span><br><span class=\"line\">        </span><br><span class=\"line\">        num = getRomanValue(s[<span class=\"number\">0</span>]);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; s.size(); i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> pre = getRomanValue(s[i - <span class=\"number\">1</span>]);</span><br><span class=\"line\">            <span class=\"keyword\">int</span> cur = getRomanValue(s[i]);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (cur &gt; pre)</span><br><span class=\"line\">                num += cur - <span class=\"number\">2</span> * pre;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">                num += cur;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> num;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n"},{"title":"169. Majority Element","date":"2016-06-12T01:54:36.000Z","_content":"\n>Given an array of size n, find the majority element. The majority element is the element that appears **more than** `⌊ n/2 ⌋` times.\n\n>You may assume that the array is non-empty and the majority element always exist in the array.\n\n题目分析：\n\n要求出现次数超过整个数组一般以上的数，只要依次比较每一个数并计数，若count = 0，则记录元素n；若count > 0，该数和n相同则count+１，不同则　count-1.\n \n```c++\nclass Solution {\npublic:\n    int majorityElement(vector<int>& nums) {\n        int count = 0;\n        int n = 0;\n        \n        for (auto it = nums.begin();it != nums.end(); it++)\n        {\n            if (count == 0)\n            {\n                count = 1;\n                n = *it;\n            }\n            else {\n                if (n == *it)\n                    count++;\n                else\n                    count--;\n            }\n        }\n        return n;\n    }\n};\n```\n","source":"_posts/169-MajorityElement.md","raw":"---\ntitle: 169. Majority Element\ndate: 2016-06-12 09:54:36\ntags: leetcode\n---\n\n>Given an array of size n, find the majority element. The majority element is the element that appears **more than** `⌊ n/2 ⌋` times.\n\n>You may assume that the array is non-empty and the majority element always exist in the array.\n\n题目分析：\n\n要求出现次数超过整个数组一般以上的数，只要依次比较每一个数并计数，若count = 0，则记录元素n；若count > 0，该数和n相同则count+１，不同则　count-1.\n \n```c++\nclass Solution {\npublic:\n    int majorityElement(vector<int>& nums) {\n        int count = 0;\n        int n = 0;\n        \n        for (auto it = nums.begin();it != nums.end(); it++)\n        {\n            if (count == 0)\n            {\n                count = 1;\n                n = *it;\n            }\n            else {\n                if (n == *it)\n                    count++;\n                else\n                    count--;\n            }\n        }\n        return n;\n    }\n};\n```\n","slug":"169-MajorityElement","published":1,"updated":"2016-06-12T02:09:35.846Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cipc8kw1n000434xous59n0br","content":"<blockquote>\n<p>Given an array of size n, find the majority element. The majority element is the element that appears <strong>more than</strong> <code>⌊ n/2 ⌋</code> times.</p>\n<p>You may assume that the array is non-empty and the majority element always exist in the array.</p>\n</blockquote>\n<p>题目分析：</p>\n<p>要求出现次数超过整个数组一般以上的数，只要依次比较每一个数并计数，若count = 0，则记录元素n；若count &gt; 0，该数和n相同则count+１，不同则　count-1.</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> Solution &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">majorityElement</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> n = <span class=\"number\">0</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> it = nums.begin();it != nums.end(); it++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (count == <span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                count = <span class=\"number\">1</span>;</span><br><span class=\"line\">                n = *it;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (n == *it)</span><br><span class=\"line\">                    count++;</span><br><span class=\"line\">                <span class=\"keyword\">else</span></span><br><span class=\"line\">                    count--;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> n;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<blockquote>\n<p>Given an array of size n, find the majority element. The majority element is the element that appears <strong>more than</strong> <code>⌊ n/2 ⌋</code> times.</p>\n<p>You may assume that the array is non-empty and the majority element always exist in the array.</p>\n</blockquote>\n<p>题目分析：</p>\n<p>要求出现次数超过整个数组一般以上的数，只要依次比较每一个数并计数，若count = 0，则记录元素n；若count &gt; 0，该数和n相同则count+１，不同则　count-1.</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> Solution &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">majorityElement</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> n = <span class=\"number\">0</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> it = nums.begin();it != nums.end(); it++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (count == <span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                count = <span class=\"number\">1</span>;</span><br><span class=\"line\">                n = *it;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (n == *it)</span><br><span class=\"line\">                    count++;</span><br><span class=\"line\">                <span class=\"keyword\">else</span></span><br><span class=\"line\">                    count--;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> n;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n"},{"title":"171. Excel Sheet Column Number","date":"2016-06-08T08:43:03.000Z","_content":"\n>Related to question Excel Sheet Column Title\n\n>Given a column title as appear in an Excel sheet, return its corresponding column number.\n\n>For example:\n\n>A -> 1\n>B -> 2\n>C -> 3\n>...\n>Z -> 26\n>AA -> 27\n>AB -> 28 \n\n\n题目分析：\n\n十进制数，按权展开，第一位权为10^0，第二位10^1……以此类推，第N位10^（N-1），该数的数值等于每位位的数值*该位对应的权值之和。因此可以推出此题的算法如下：\n\n```c++\nclass Solution {\npublic:\n    int titleToNumber(string s) {\n        if (s.empty())\n            return 0;\n\n        int num = 0;\n        int len = s.size();\n        for(int i = 0; i < len; i++)\n        {\n            num += pow(26,len - i - 1) * (s[i] - 'A' + 1);\n        }\n        return num;\n    }\n};\n```\n","source":"_posts/171-ExcelSheetColumnNumber.md","raw":"---\ntitle: 171. Excel Sheet Column Number\ndate: 2016-06-08 16:43:03\ntags: leetcode\n---\n\n>Related to question Excel Sheet Column Title\n\n>Given a column title as appear in an Excel sheet, return its corresponding column number.\n\n>For example:\n\n>A -> 1\n>B -> 2\n>C -> 3\n>...\n>Z -> 26\n>AA -> 27\n>AB -> 28 \n\n\n题目分析：\n\n十进制数，按权展开，第一位权为10^0，第二位10^1……以此类推，第N位10^（N-1），该数的数值等于每位位的数值*该位对应的权值之和。因此可以推出此题的算法如下：\n\n```c++\nclass Solution {\npublic:\n    int titleToNumber(string s) {\n        if (s.empty())\n            return 0;\n\n        int num = 0;\n        int len = s.size();\n        for(int i = 0; i < len; i++)\n        {\n            num += pow(26,len - i - 1) * (s[i] - 'A' + 1);\n        }\n        return num;\n    }\n};\n```\n","slug":"171-ExcelSheetColumnNumber","published":1,"updated":"2016-06-12T01:46:02.285Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cipc8kw1q000634xodn7cqy0v","content":"<blockquote>\n<p>Related to question Excel Sheet Column Title</p>\n<p>Given a column title as appear in an Excel sheet, return its corresponding column number.</p>\n<p>For example:</p>\n<p>A -&gt; 1<br>B -&gt; 2<br>C -&gt; 3<br>…<br>Z -&gt; 26<br>AA -&gt; 27<br>AB -&gt; 28 </p>\n</blockquote>\n<p>题目分析：</p>\n<p>十进制数，按权展开，第一位权为10^0，第二位10^1……以此类推，第N位10^（N-1），该数的数值等于每位位的数值*该位对应的权值之和。因此可以推出此题的算法如下：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> Solution &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">titleToNumber</span><span class=\"params\">(<span class=\"built_in\">string</span> s)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (s.empty())</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span> num = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> len = s.size();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; len; i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            num += <span class=\"built_in\">pow</span>(<span class=\"number\">26</span>,len - i - <span class=\"number\">1</span>) * (s[i] - <span class=\"string\">'A'</span> + <span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> num;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<blockquote>\n<p>Related to question Excel Sheet Column Title</p>\n<p>Given a column title as appear in an Excel sheet, return its corresponding column number.</p>\n<p>For example:</p>\n<p>A -&gt; 1<br>B -&gt; 2<br>C -&gt; 3<br>…<br>Z -&gt; 26<br>AA -&gt; 27<br>AB -&gt; 28 </p>\n</blockquote>\n<p>题目分析：</p>\n<p>十进制数，按权展开，第一位权为10^0，第二位10^1……以此类推，第N位10^（N-1），该数的数值等于每位位的数值*该位对应的权值之和。因此可以推出此题的算法如下：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> Solution &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">titleToNumber</span><span class=\"params\">(<span class=\"built_in\">string</span> s)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (s.empty())</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span> num = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> len = s.size();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; len; i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            num += <span class=\"built_in\">pow</span>(<span class=\"number\">26</span>,len - i - <span class=\"number\">1</span>) * (s[i] - <span class=\"string\">'A'</span> + <span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> num;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n"},{"title":"206-Reverse Linked List","date":"2016-06-12T02:14:41.000Z","_content":"\n> Reverse a singly linked list.\n\n题目分析：\n\n用stack的思想进行反转，依次push，最后栈顶元素为list的头结点。\n\n```c++\nclass Solution {\npublic:\n    ListNode* reverseList(ListNode* head) {\n        if (head == NULL)\n            return NULL;\n            \n        ListNode *s = NULL;\n        ListNode *p = head;\n        while (p != NULL)\n        {\n            ListNode *q = p->next;\n            p->next = s;\n            s = p;\n            p = q;\n        }\n        return s;\n    }\n};\n```","source":"_posts/206-ReverseLinkedList.md","raw":"---\ntitle: 206-Reverse Linked List\ndate: 2016-06-12 10:14:41\ntags: leetcode\n---\n\n> Reverse a singly linked list.\n\n题目分析：\n\n用stack的思想进行反转，依次push，最后栈顶元素为list的头结点。\n\n```c++\nclass Solution {\npublic:\n    ListNode* reverseList(ListNode* head) {\n        if (head == NULL)\n            return NULL;\n            \n        ListNode *s = NULL;\n        ListNode *p = head;\n        while (p != NULL)\n        {\n            ListNode *q = p->next;\n            p->next = s;\n            s = p;\n            p = q;\n        }\n        return s;\n    }\n};\n```","slug":"206-ReverseLinkedList","published":1,"updated":"2016-06-12T02:37:34.722Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cipc8kw1t000834xovypjpvpr","content":"<blockquote>\n<p>Reverse a singly linked list.</p>\n</blockquote>\n<p>题目分析：</p>\n<p>用stack的思想进行反转，依次push，最后栈顶元素为list的头结点。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> Solution &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\">ListNode* <span class=\"title\">reverseList</span><span class=\"params\">(ListNode* head)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (head == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">            </span><br><span class=\"line\">        ListNode *s = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">        ListNode *p = head;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (p != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            ListNode *q = p-&gt;next;</span><br><span class=\"line\">            p-&gt;next = s;</span><br><span class=\"line\">            s = p;</span><br><span class=\"line\">            p = q;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>","excerpt":"","more":"<blockquote>\n<p>Reverse a singly linked list.</p>\n</blockquote>\n<p>题目分析：</p>\n<p>用stack的思想进行反转，依次push，最后栈顶元素为list的头结点。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> Solution &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\">ListNode* <span class=\"title\">reverseList</span><span class=\"params\">(ListNode* head)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (head == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">            </span><br><span class=\"line\">        ListNode *s = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">        ListNode *p = head;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (p != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            ListNode *q = p-&gt;next;</span><br><span class=\"line\">            p-&gt;next = s;</span><br><span class=\"line\">            s = p;</span><br><span class=\"line\">            p = q;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>"},{"title":"217. Contains Duplicate","date":"2016-06-12T02:06:39.000Z","_content":"\n>Given an array of integers, find if the array contains any duplicates. Your function should return true if any value appears at least twice in the array, and it should return false if every element is distinct.\n\n题目分析：\n\n要找出一个数组中是否有重复的元素，可以同set或者map等数据结构进行处理。\n\n```c++\nclass Solution {\npublic:\n    bool containsDuplicate(vector<int>& nums) {\n        set<int> a;\n        for (auto it = nums.begin(); it != nums.end(); it++)\n        {\n            if (a.find(*it) == a.end())\n                a.insert(*it);\n            else\n                return true;\n        }\n        return false;\n    }\n};\n```","source":"_posts/217-ContainsDuplicate.md","raw":"---\ntitle: 217. Contains Duplicate\ndate: 2016-06-12 10:06:39\ntags: leetcode\n---\n\n>Given an array of integers, find if the array contains any duplicates. Your function should return true if any value appears at least twice in the array, and it should return false if every element is distinct.\n\n题目分析：\n\n要找出一个数组中是否有重复的元素，可以同set或者map等数据结构进行处理。\n\n```c++\nclass Solution {\npublic:\n    bool containsDuplicate(vector<int>& nums) {\n        set<int> a;\n        for (auto it = nums.begin(); it != nums.end(); it++)\n        {\n            if (a.find(*it) == a.end())\n                a.insert(*it);\n            else\n                return true;\n        }\n        return false;\n    }\n};\n```","slug":"217-ContainsDuplicate","published":1,"updated":"2016-06-12T02:11:39.326Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cipc8kw1w000b34xocwuxx5j3","content":"<blockquote>\n<p>Given an array of integers, find if the array contains any duplicates. Your function should return true if any value appears at least twice in the array, and it should return false if every element is distinct.</p>\n</blockquote>\n<p>题目分析：</p>\n<p>要找出一个数组中是否有重复的元素，可以同set或者map等数据结构进行处理。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> Solution &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">containsDuplicate</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">set</span>&lt;<span class=\"keyword\">int</span>&gt; a;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> it = nums.begin(); it != nums.end(); it++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (a.find(*it) == a.end())</span><br><span class=\"line\">                a.insert(*it);</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>","excerpt":"","more":"<blockquote>\n<p>Given an array of integers, find if the array contains any duplicates. Your function should return true if any value appears at least twice in the array, and it should return false if every element is distinct.</p>\n</blockquote>\n<p>题目分析：</p>\n<p>要找出一个数组中是否有重复的元素，可以同set或者map等数据结构进行处理。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> Solution &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">containsDuplicate</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">set</span>&lt;<span class=\"keyword\">int</span>&gt; a;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> it = nums.begin(); it != nums.end(); it++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (a.find(*it) == a.end())</span><br><span class=\"line\">                a.insert(*it);</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>"},{"title":"226. Invert Binary Tree","date":"2016-06-07T09:19:27.000Z","_content":"\n>Invert a binary tree.\n\n```\n        4\n      /   \\\n     2     7\n    / \\   / \\\n   1   3 6   9   \n```\n\nto\n\n```\n        4\n      /   \\\n     7     2\n    / \\   / \\\n   9   6 3   1 \n```\n\n**1.递归**\n\n```c++\nclass Solution {\npublic:\n    TreeNode* invertTree(TreeNode* root) {\n        if (root == NULL)\n            return NULL;\n        TreeNode *tmp = root->left;\n        root->left = invertTree(root->right);\n        root->right = invertTree(tmp);\n    }\n};\n```\n\n**2.非递归**\n\n```c++\nclass Solution {\npublic:\n    TreeNode* invertTree(TreeNode* root) {\n        if (root == NULL)\n            return NULL;\n        \n        queue<TreeNode *> p;\n        p.push(root);\n        while (! p.empty())\n        {\n            TreeNode *node = p.front();\n            TreeNode *left = node->left;\n            node->left = node->right;\n            node->right = left;\n            p.pop();\n            \n            if (node->left != NULL)\n                p.push(node->left);\n            if (node->right != NULL)\n                p.push(node->right);\n        }\n        return root;\n    }\n};\n```\n\n\n","source":"_posts/226-InvertBinaryTree.md","raw":"---\ntitle: 226. Invert Binary Tree\ndate: 2016-06-07 17:19:27\ntags: leetcode\n---\n\n>Invert a binary tree.\n\n```\n        4\n      /   \\\n     2     7\n    / \\   / \\\n   1   3 6   9   \n```\n\nto\n\n```\n        4\n      /   \\\n     7     2\n    / \\   / \\\n   9   6 3   1 \n```\n\n**1.递归**\n\n```c++\nclass Solution {\npublic:\n    TreeNode* invertTree(TreeNode* root) {\n        if (root == NULL)\n            return NULL;\n        TreeNode *tmp = root->left;\n        root->left = invertTree(root->right);\n        root->right = invertTree(tmp);\n    }\n};\n```\n\n**2.非递归**\n\n```c++\nclass Solution {\npublic:\n    TreeNode* invertTree(TreeNode* root) {\n        if (root == NULL)\n            return NULL;\n        \n        queue<TreeNode *> p;\n        p.push(root);\n        while (! p.empty())\n        {\n            TreeNode *node = p.front();\n            TreeNode *left = node->left;\n            node->left = node->right;\n            node->right = left;\n            p.pop();\n            \n            if (node->left != NULL)\n                p.push(node->left);\n            if (node->right != NULL)\n                p.push(node->right);\n        }\n        return root;\n    }\n};\n```\n\n\n","slug":"226-InvertBinaryTree","published":1,"updated":"2016-06-08T09:48:11.054Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cipc8kw1z000d34xoaesg6ww9","content":"<blockquote>\n<p>Invert a binary tree.</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">     4</span><br><span class=\"line\">   /   \\</span><br><span class=\"line\">  2     7</span><br><span class=\"line\"> / \\   / \\</span><br><span class=\"line\">1   3 6   9</span><br></pre></td></tr></table></figure>\n<p>to</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">     4</span><br><span class=\"line\">   /   \\</span><br><span class=\"line\">  7     2</span><br><span class=\"line\"> / \\   / \\</span><br><span class=\"line\">9   6 3   1</span><br></pre></td></tr></table></figure>\n<p><strong>1.递归</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> Solution &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\">TreeNode* <span class=\"title\">invertTree</span><span class=\"params\">(TreeNode* root)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">        TreeNode *tmp = root-&gt;left;</span><br><span class=\"line\">        root-&gt;left = invertTree(root-&gt;right);</span><br><span class=\"line\">        root-&gt;right = invertTree(tmp);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p><strong>2.非递归</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> Solution &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\">TreeNode* <span class=\"title\">invertTree</span><span class=\"params\">(TreeNode* root)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"built_in\">queue</span>&lt;TreeNode *&gt; p;</span><br><span class=\"line\">        p.push(root);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (! p.empty())</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            TreeNode *node = p.front();</span><br><span class=\"line\">            TreeNode *left = node-&gt;left;</span><br><span class=\"line\">            node-&gt;left = node-&gt;right;</span><br><span class=\"line\">            node-&gt;right = left;</span><br><span class=\"line\">            p.pop();</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">if</span> (node-&gt;left != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">                p.push(node-&gt;left);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (node-&gt;right != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">                p.push(node-&gt;right);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<blockquote>\n<p>Invert a binary tree.</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">     4</span><br><span class=\"line\">   /   \\</span><br><span class=\"line\">  2     7</span><br><span class=\"line\"> / \\   / \\</span><br><span class=\"line\">1   3 6   9</span><br></pre></td></tr></table></figure>\n<p>to</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">     4</span><br><span class=\"line\">   /   \\</span><br><span class=\"line\">  7     2</span><br><span class=\"line\"> / \\   / \\</span><br><span class=\"line\">9   6 3   1</span><br></pre></td></tr></table></figure>\n<p><strong>1.递归</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> Solution &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\">TreeNode* <span class=\"title\">invertTree</span><span class=\"params\">(TreeNode* root)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">        TreeNode *tmp = root-&gt;left;</span><br><span class=\"line\">        root-&gt;left = invertTree(root-&gt;right);</span><br><span class=\"line\">        root-&gt;right = invertTree(tmp);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p><strong>2.非递归</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> Solution &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\">TreeNode* <span class=\"title\">invertTree</span><span class=\"params\">(TreeNode* root)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"built_in\">queue</span>&lt;TreeNode *&gt; p;</span><br><span class=\"line\">        p.push(root);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (! p.empty())</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            TreeNode *node = p.front();</span><br><span class=\"line\">            TreeNode *left = node-&gt;left;</span><br><span class=\"line\">            node-&gt;left = node-&gt;right;</span><br><span class=\"line\">            node-&gt;right = left;</span><br><span class=\"line\">            p.pop();</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">if</span> (node-&gt;left != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">                p.push(node-&gt;left);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (node-&gt;right != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">                p.push(node-&gt;right);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n"},{"title":"237. Delete Node in a Linked List","date":"2016-06-08T04:00:35.000Z","_content":"\n>Write a function to delete a node (except the tail) in a >singly linked list, given only access to that node.\n\n>Supposed the linked list is `1 -> 2 -> 3 -> 4` and you >are >given the third node with value `3`, the linked list >should >become `1 -> 2 -> 4` after calling your function.\n\n```c++\nclass Solution {\npublic:\n    void deleteNode(ListNode* node) {\n        if (node == NULL)\n            return;\n        ListNode *tmp = node->next;\n        node->val = tmp->val;\n        node->next = tmp->next;\n        free(tmp);\n    }\n};\n```","source":"_posts/237-DeleteNodeinaLinkedList.md","raw":"---\ntitle: 237. Delete Node in a Linked List\ndate: 2016-06-08 12:00:35\ntags: leetcode\n---\n\n>Write a function to delete a node (except the tail) in a >singly linked list, given only access to that node.\n\n>Supposed the linked list is `1 -> 2 -> 3 -> 4` and you >are >given the third node with value `3`, the linked list >should >become `1 -> 2 -> 4` after calling your function.\n\n```c++\nclass Solution {\npublic:\n    void deleteNode(ListNode* node) {\n        if (node == NULL)\n            return;\n        ListNode *tmp = node->next;\n        node->val = tmp->val;\n        node->next = tmp->next;\n        free(tmp);\n    }\n};\n```","slug":"237-DeleteNodeinaLinkedList","published":1,"updated":"2016-06-12T01:42:26.166Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cipc8kw20000f34xoivqbim84","content":"<blockquote>\n<p>Write a function to delete a node (except the tail) in a &gt;singly linked list, given only access to that node.</p>\n<p>Supposed the linked list is <code>1 -&gt; 2 -&gt; 3 -&gt; 4</code> and you &gt;are &gt;given the third node with value <code>3</code>, the linked list &gt;should &gt;become <code>1 -&gt; 2 -&gt; 4</code> after calling your function.</p>\n</blockquote>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> Solution &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">deleteNode</span><span class=\"params\">(ListNode* node)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        ListNode *tmp = node-&gt;next;</span><br><span class=\"line\">        node-&gt;val = tmp-&gt;val;</span><br><span class=\"line\">        node-&gt;next = tmp-&gt;next;</span><br><span class=\"line\">        <span class=\"built_in\">free</span>(tmp);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>","excerpt":"","more":"<blockquote>\n<p>Write a function to delete a node (except the tail) in a &gt;singly linked list, given only access to that node.</p>\n<p>Supposed the linked list is <code>1 -&gt; 2 -&gt; 3 -&gt; 4</code> and you &gt;are &gt;given the third node with value <code>3</code>, the linked list &gt;should &gt;become <code>1 -&gt; 2 -&gt; 4</code> after calling your function.</p>\n</blockquote>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> Solution &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">deleteNode</span><span class=\"params\">(ListNode* node)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        ListNode *tmp = node-&gt;next;</span><br><span class=\"line\">        node-&gt;val = tmp-&gt;val;</span><br><span class=\"line\">        node-&gt;next = tmp-&gt;next;</span><br><span class=\"line\">        <span class=\"built_in\">free</span>(tmp);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>"},{"title":"242. Valid Anagram","date":"2016-06-08T08:39:06.000Z","_content":"\n>Given two strings s and t, write a function to determine if t is an anagram of s.\n\n>For example,\n>s = \"anagram\", t = \"nagaram\", return true.\n>s = \"rat\", t = \"car\", return false.\n\n\n```c++\nclass Solution {\npublic:\n    bool isAnagram(string s, string t) {\n        int a[26] = {0};\n        if (s.size() != t.size())\n            return false;\n        int len = s.size();\n        for (int i = 0; i < len; i++)\n            a[s[i] - 'a']++;\n        for (int i = 0; i < len; i++)\n            a[t[i] - 'a']--;\n        for (int i = 0; i < 26; i++)\n        {\n            if (a[i] > 0)\n                return false;\n        }\n        return true;\n    }\n};\n```","source":"_posts/242-ValidAnagram.md","raw":"---\ntitle: 242. Valid Anagram\ndate: 2016-06-08 16:39:06\ntags: leetcode\n---\n\n>Given two strings s and t, write a function to determine if t is an anagram of s.\n\n>For example,\n>s = \"anagram\", t = \"nagaram\", return true.\n>s = \"rat\", t = \"car\", return false.\n\n\n```c++\nclass Solution {\npublic:\n    bool isAnagram(string s, string t) {\n        int a[26] = {0};\n        if (s.size() != t.size())\n            return false;\n        int len = s.size();\n        for (int i = 0; i < len; i++)\n            a[s[i] - 'a']++;\n        for (int i = 0; i < len; i++)\n            a[t[i] - 'a']--;\n        for (int i = 0; i < 26; i++)\n        {\n            if (a[i] > 0)\n                return false;\n        }\n        return true;\n    }\n};\n```","slug":"242-ValidAnagram","published":1,"updated":"2016-06-12T01:42:40.258Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cipc8kw23000h34xofq3qlcn4","content":"<blockquote>\n<p>Given two strings s and t, write a function to determine if t is an anagram of s.</p>\n<p>For example,<br>s = “anagram”, t = “nagaram”, return true.<br>s = “rat”, t = “car”, return false.</p>\n</blockquote>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> Solution &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">isAnagram</span><span class=\"params\">(<span class=\"built_in\">string</span> s, <span class=\"built_in\">string</span> t)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> a[<span class=\"number\">26</span>] = &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (s.size() != t.size())</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> len = s.size();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; len; i++)</span><br><span class=\"line\">            a[s[i] - <span class=\"string\">'a'</span>]++;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; len; i++)</span><br><span class=\"line\">            a[t[i] - <span class=\"string\">'a'</span>]--;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">26</span>; i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (a[i] &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>","excerpt":"","more":"<blockquote>\n<p>Given two strings s and t, write a function to determine if t is an anagram of s.</p>\n<p>For example,<br>s = “anagram”, t = “nagaram”, return true.<br>s = “rat”, t = “car”, return false.</p>\n</blockquote>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> Solution &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">isAnagram</span><span class=\"params\">(<span class=\"built_in\">string</span> s, <span class=\"built_in\">string</span> t)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> a[<span class=\"number\">26</span>] = &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (s.size() != t.size())</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> len = s.size();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; len; i++)</span><br><span class=\"line\">            a[s[i] - <span class=\"string\">'a'</span>]++;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; len; i++)</span><br><span class=\"line\">            a[t[i] - <span class=\"string\">'a'</span>]--;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">26</span>; i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (a[i] &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>"},{"title":"258 Add Digits","date":"2016-06-07T07:11:03.000Z","_content":"\n>Given a non-negative integer `num`, repeatedly add all its digits until the result has only one digit.\n\n>For example:\n\n>Given `num = 38`, the process is like: `3 + 8 = 11`, `1 + 1 = 2`. Since `2` has only one digit, return it.\n\n**解题思路：**\n\n假设输入的数字是一个5位数字num，则num的各位分别为a、b、c、d、e。\n\n有如下关系：`num = a * 10000 + b * 1000 + c * 100 + d * 10 + e`\n\n即：`num = (a + b + c + d + e) + (a * 9999 + b * 999 + c * 99 + d * 9)`\n\n因为 `a * 9999 + b * 999 + c * 99 + d * 9` 一定可以被9整除，因此num模除9的结果与 `a + b + c + d + e` 模除9的结果是一样的。\n\n对数字 `a + b + c + d + e` 反复执行同类操作，最后的结果就是一个 `1-9` 的数字加上一串数字，最左边的数字是 `1-9` 之间的，右侧的数字永远都是可以被9整除的。\n\n这道题最后的目标，就是不断将各位相加，相加到最后，当结果小于10时返回。因为最后结果在1-9之间，得到9之后将不会再对各位进行相加，因此不会出现结果为0的情况。因为 `(x + y) % z = (x % z + y % z) % z`，又因为 `x % z % z = x % z`，因此结果为 `(num - 1) % 9 + 1`，只模除9一次，并将模除后的结果加一返回。\n\n\n\n```c++\nclass Solution {\npublic:\n    int addDigits(int num) {\n        return num == 0 ? 0 : (((num - 1) % 9) + 1);\n    }\n};\n```\n\n\n\n\n**参考资料：**\n\nhttp://my.oschina.net/Tsybius2014/blog/497645","source":"_posts/258-AddDigits.md","raw":"---\ntitle: 258 Add Digits\ndate: 2016-06-07 15:11:03\ntags: leetcode\n---\n\n>Given a non-negative integer `num`, repeatedly add all its digits until the result has only one digit.\n\n>For example:\n\n>Given `num = 38`, the process is like: `3 + 8 = 11`, `1 + 1 = 2`. Since `2` has only one digit, return it.\n\n**解题思路：**\n\n假设输入的数字是一个5位数字num，则num的各位分别为a、b、c、d、e。\n\n有如下关系：`num = a * 10000 + b * 1000 + c * 100 + d * 10 + e`\n\n即：`num = (a + b + c + d + e) + (a * 9999 + b * 999 + c * 99 + d * 9)`\n\n因为 `a * 9999 + b * 999 + c * 99 + d * 9` 一定可以被9整除，因此num模除9的结果与 `a + b + c + d + e` 模除9的结果是一样的。\n\n对数字 `a + b + c + d + e` 反复执行同类操作，最后的结果就是一个 `1-9` 的数字加上一串数字，最左边的数字是 `1-9` 之间的，右侧的数字永远都是可以被9整除的。\n\n这道题最后的目标，就是不断将各位相加，相加到最后，当结果小于10时返回。因为最后结果在1-9之间，得到9之后将不会再对各位进行相加，因此不会出现结果为0的情况。因为 `(x + y) % z = (x % z + y % z) % z`，又因为 `x % z % z = x % z`，因此结果为 `(num - 1) % 9 + 1`，只模除9一次，并将模除后的结果加一返回。\n\n\n\n```c++\nclass Solution {\npublic:\n    int addDigits(int num) {\n        return num == 0 ? 0 : (((num - 1) % 9) + 1);\n    }\n};\n```\n\n\n\n\n**参考资料：**\n\nhttp://my.oschina.net/Tsybius2014/blog/497645","slug":"258-AddDigits","published":1,"updated":"2016-06-07T09:16:36.876Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cipc8kw28000j34xols5bx3wd","content":"<blockquote>\n<p>Given a non-negative integer <code>num</code>, repeatedly add all its digits until the result has only one digit.</p>\n<p>For example:</p>\n<p>Given <code>num = 38</code>, the process is like: <code>3 + 8 = 11</code>, <code>1 + 1 = 2</code>. Since <code>2</code> has only one digit, return it.</p>\n</blockquote>\n<p><strong>解题思路：</strong></p>\n<p>假设输入的数字是一个5位数字num，则num的各位分别为a、b、c、d、e。</p>\n<p>有如下关系：<code>num = a * 10000 + b * 1000 + c * 100 + d * 10 + e</code></p>\n<p>即：<code>num = (a + b + c + d + e) + (a * 9999 + b * 999 + c * 99 + d * 9)</code></p>\n<p>因为 <code>a * 9999 + b * 999 + c * 99 + d * 9</code> 一定可以被9整除，因此num模除9的结果与 <code>a + b + c + d + e</code> 模除9的结果是一样的。</p>\n<p>对数字 <code>a + b + c + d + e</code> 反复执行同类操作，最后的结果就是一个 <code>1-9</code> 的数字加上一串数字，最左边的数字是 <code>1-9</code> 之间的，右侧的数字永远都是可以被9整除的。</p>\n<p>这道题最后的目标，就是不断将各位相加，相加到最后，当结果小于10时返回。因为最后结果在1-9之间，得到9之后将不会再对各位进行相加，因此不会出现结果为0的情况。因为 <code>(x + y) % z = (x % z + y % z) % z</code>，又因为 <code>x % z % z = x % z</code>，因此结果为 <code>(num - 1) % 9 + 1</code>，只模除9一次，并将模除后的结果加一返回。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> Solution &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">addDigits</span><span class=\"params\">(<span class=\"keyword\">int</span> num)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> num == <span class=\"number\">0</span> ? <span class=\"number\">0</span> : (((num - <span class=\"number\">1</span>) % <span class=\"number\">9</span>) + <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p><strong>参考资料：</strong></p>\n<p><a href=\"http://my.oschina.net/Tsybius2014/blog/497645\" target=\"_blank\" rel=\"external\">http://my.oschina.net/Tsybius2014/blog/497645</a></p>\n","excerpt":"","more":"<blockquote>\n<p>Given a non-negative integer <code>num</code>, repeatedly add all its digits until the result has only one digit.</p>\n<p>For example:</p>\n<p>Given <code>num = 38</code>, the process is like: <code>3 + 8 = 11</code>, <code>1 + 1 = 2</code>. Since <code>2</code> has only one digit, return it.</p>\n</blockquote>\n<p><strong>解题思路：</strong></p>\n<p>假设输入的数字是一个5位数字num，则num的各位分别为a、b、c、d、e。</p>\n<p>有如下关系：<code>num = a * 10000 + b * 1000 + c * 100 + d * 10 + e</code></p>\n<p>即：<code>num = (a + b + c + d + e) + (a * 9999 + b * 999 + c * 99 + d * 9)</code></p>\n<p>因为 <code>a * 9999 + b * 999 + c * 99 + d * 9</code> 一定可以被9整除，因此num模除9的结果与 <code>a + b + c + d + e</code> 模除9的结果是一样的。</p>\n<p>对数字 <code>a + b + c + d + e</code> 反复执行同类操作，最后的结果就是一个 <code>1-9</code> 的数字加上一串数字，最左边的数字是 <code>1-9</code> 之间的，右侧的数字永远都是可以被9整除的。</p>\n<p>这道题最后的目标，就是不断将各位相加，相加到最后，当结果小于10时返回。因为最后结果在1-9之间，得到9之后将不会再对各位进行相加，因此不会出现结果为0的情况。因为 <code>(x + y) % z = (x % z + y % z) % z</code>，又因为 <code>x % z % z = x % z</code>，因此结果为 <code>(num - 1) % 9 + 1</code>，只模除9一次，并将模除后的结果加一返回。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> Solution &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">addDigits</span><span class=\"params\">(<span class=\"keyword\">int</span> num)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> num == <span class=\"number\">0</span> ? <span class=\"number\">0</span> : (((num - <span class=\"number\">1</span>) % <span class=\"number\">9</span>) + <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p><strong>参考资料：</strong></p>\n<p><a href=\"http://my.oschina.net/Tsybius2014/blog/497645\">http://my.oschina.net/Tsybius2014/blog/497645</a></p>\n"},{"title":"283. Move Zeroes","date":"2016-06-08T02:56:41.000Z","_content":"\n>Given an array `nums`, write a function to move all `0`'s to >the end of it while maintaining the relative order of the >non-zero elements.\n\n>For example, given `nums = [0, 1, 0, 3, 12]`, after calling >your function, `nums` should be `[1, 3, 12, 0, 0]`.\n\n**题意：**\n\n给一组数，把0都移动到数组后方。\n\n```c++\nclass Solution {\npublic:\n    void moveZeroes(vector<int>& nums) {\n        int pos = 0;\n        for (int i = 0; i < nums.size(); i++)\n        {\n            if (nums[i] != 0)\n                nums[pos++] = nums[i];\n        }\n        \n        for (int i = pos; i < nums.size(); i++)\n            nums[i] = 0;\n    }\n};\n```\n","source":"_posts/283-MoveZeroes.md","raw":"---\ntitle: 283. Move Zeroes\ndate: 2016-06-08 10:56:41\ntags: leetcode\n---\n\n>Given an array `nums`, write a function to move all `0`'s to >the end of it while maintaining the relative order of the >non-zero elements.\n\n>For example, given `nums = [0, 1, 0, 3, 12]`, after calling >your function, `nums` should be `[1, 3, 12, 0, 0]`.\n\n**题意：**\n\n给一组数，把0都移动到数组后方。\n\n```c++\nclass Solution {\npublic:\n    void moveZeroes(vector<int>& nums) {\n        int pos = 0;\n        for (int i = 0; i < nums.size(); i++)\n        {\n            if (nums[i] != 0)\n                nums[pos++] = nums[i];\n        }\n        \n        for (int i = pos; i < nums.size(); i++)\n            nums[i] = 0;\n    }\n};\n```\n","slug":"283-MoveZeroes","published":1,"updated":"2016-06-08T03:41:14.444Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cipc8kw2a000l34xooxonqub5","content":"<blockquote>\n<p>Given an array <code>nums</code>, write a function to move all <code>0</code>‘s to &gt;the end of it while maintaining the relative order of the &gt;non-zero elements.</p>\n<p>For example, given <code>nums = [0, 1, 0, 3, 12]</code>, after calling &gt;your function, <code>nums</code> should be <code>[1, 3, 12, 0, 0]</code>.</p>\n</blockquote>\n<p><strong>题意：</strong></p>\n<p>给一组数，把0都移动到数组后方。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> Solution &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">moveZeroes</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> pos = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; nums.size(); i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nums[i] != <span class=\"number\">0</span>)</span><br><span class=\"line\">                nums[pos++] = nums[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = pos; i &lt; nums.size(); i++)</span><br><span class=\"line\">            nums[i] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<blockquote>\n<p>Given an array <code>nums</code>, write a function to move all <code>0</code>‘s to &gt;the end of it while maintaining the relative order of the &gt;non-zero elements.</p>\n<p>For example, given <code>nums = [0, 1, 0, 3, 12]</code>, after calling &gt;your function, <code>nums</code> should be <code>[1, 3, 12, 0, 0]</code>.</p>\n</blockquote>\n<p><strong>题意：</strong></p>\n<p>给一组数，把0都移动到数组后方。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> Solution &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">moveZeroes</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> pos = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; nums.size(); i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nums[i] != <span class=\"number\">0</span>)</span><br><span class=\"line\">                nums[pos++] = nums[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = pos; i &lt; nums.size(); i++)</span><br><span class=\"line\">            nums[i] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n"},{"title":"292 Nim Game","date":"2016-06-07T06:28:15.000Z","_content":">You are playing the following Nim Game with your friend: >There is a heap of stones on the table, each time one of  >you take turns to remove 1 to 3 stones. The one who >removes the last stone will be the winner. You will take >the first turn to remove the stones.\n\n>Both of you are very clever and have optimal strategies >for the game. Write a function to determine whether you >can win the game given the number of stones in the heap.\n\n>For example, if there are 4 stones in the heap, then you >will never win the game: no matter 1, 2, or 3 stones you >remove, the last stone will always be removed by your >friend.\n\n**题目大意：**\n\n你和朋友正在玩一个叫做Nim Game的游戏。有一堆石头在桌子上，每一次可以拿走1到3个石头。最后一个拿走石头的是赢家。你第一次拿走石头。\n假设有4个石头，那么无论你怎么拿去1,2,3个石头，最后总是你的朋友移去最后的石头。\n\n**解题思想：**\n\n根据题意可以判断如果石头的个数为4的倍数的话，那么赢家都是你的朋友。\n\n**代码如下：**\n\n```c++\nclass Solution {\npublic:\n    bool canWinNim(int n) {\n        if (n < 4)\n            return true;\n        else\n            return !(n % 4 == 0);\n    }\n};\n```\n","source":"_posts/292-NimGame.md","raw":"---\ntitle: 292 Nim Game\ndate: 2016-06-07 14:28:15\ntags: leetcode\n---\n>You are playing the following Nim Game with your friend: >There is a heap of stones on the table, each time one of  >you take turns to remove 1 to 3 stones. The one who >removes the last stone will be the winner. You will take >the first turn to remove the stones.\n\n>Both of you are very clever and have optimal strategies >for the game. Write a function to determine whether you >can win the game given the number of stones in the heap.\n\n>For example, if there are 4 stones in the heap, then you >will never win the game: no matter 1, 2, or 3 stones you >remove, the last stone will always be removed by your >friend.\n\n**题目大意：**\n\n你和朋友正在玩一个叫做Nim Game的游戏。有一堆石头在桌子上，每一次可以拿走1到3个石头。最后一个拿走石头的是赢家。你第一次拿走石头。\n假设有4个石头，那么无论你怎么拿去1,2,3个石头，最后总是你的朋友移去最后的石头。\n\n**解题思想：**\n\n根据题意可以判断如果石头的个数为4的倍数的话，那么赢家都是你的朋友。\n\n**代码如下：**\n\n```c++\nclass Solution {\npublic:\n    bool canWinNim(int n) {\n        if (n < 4)\n            return true;\n        else\n            return !(n % 4 == 0);\n    }\n};\n```\n","slug":"292-NimGame","published":1,"updated":"2016-06-07T09:16:28.464Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cipc8kw2c000n34xobc3dha4j","content":"<blockquote>\n<p>You are playing the following Nim Game with your friend: &gt;There is a heap of stones on the table, each time one of  &gt;you take turns to remove 1 to 3 stones. The one who &gt;removes the last stone will be the winner. You will take &gt;the first turn to remove the stones.</p>\n<p>Both of you are very clever and have optimal strategies &gt;for the game. Write a function to determine whether you &gt;can win the game given the number of stones in the heap.</p>\n<p>For example, if there are 4 stones in the heap, then you &gt;will never win the game: no matter 1, 2, or 3 stones you &gt;remove, the last stone will always be removed by your &gt;friend.</p>\n</blockquote>\n<p><strong>题目大意：</strong></p>\n<p>你和朋友正在玩一个叫做Nim Game的游戏。有一堆石头在桌子上，每一次可以拿走1到3个石头。最后一个拿走石头的是赢家。你第一次拿走石头。<br>假设有4个石头，那么无论你怎么拿去1,2,3个石头，最后总是你的朋友移去最后的石头。</p>\n<p><strong>解题思想：</strong></p>\n<p>根据题意可以判断如果石头的个数为4的倍数的话，那么赢家都是你的朋友。</p>\n<p><strong>代码如下：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> Solution &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">canWinNim</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n &lt; <span class=\"number\">4</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> !(n % <span class=\"number\">4</span> == <span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<blockquote>\n<p>You are playing the following Nim Game with your friend: &gt;There is a heap of stones on the table, each time one of  &gt;you take turns to remove 1 to 3 stones. The one who &gt;removes the last stone will be the winner. You will take &gt;the first turn to remove the stones.</p>\n<p>Both of you are very clever and have optimal strategies &gt;for the game. Write a function to determine whether you &gt;can win the game given the number of stones in the heap.</p>\n<p>For example, if there are 4 stones in the heap, then you &gt;will never win the game: no matter 1, 2, or 3 stones you &gt;remove, the last stone will always be removed by your &gt;friend.</p>\n</blockquote>\n<p><strong>题目大意：</strong></p>\n<p>你和朋友正在玩一个叫做Nim Game的游戏。有一堆石头在桌子上，每一次可以拿走1到3个石头。最后一个拿走石头的是赢家。你第一次拿走石头。<br>假设有4个石头，那么无论你怎么拿去1,2,3个石头，最后总是你的朋友移去最后的石头。</p>\n<p><strong>解题思想：</strong></p>\n<p>根据题意可以判断如果石头的个数为4的倍数的话，那么赢家都是你的朋友。</p>\n<p><strong>代码如下：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> Solution &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">canWinNim</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n &lt; <span class=\"number\">4</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> !(n % <span class=\"number\">4</span> == <span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n"},{"title":"test","date":"2016-06-12T06:36:19.000Z","_content":"\naaaaa\n","source":"_posts/test.md","raw":"---\ntitle: test\ndate: 2016-06-12 14:36:19\ntags: leetcode\n---\n\naaaaa\n","slug":"test","published":1,"updated":"2016-06-12T06:36:34.498Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cipc8kw2d000p34xokrv39mgh","content":"<p>aaaaa</p>\n","excerpt":"","more":"<p>aaaaa</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cipc8kw1n000434xous59n0br","tag_id":"cipc8kw1g000234xoitmk4x8w","_id":"cipc8kw1s000734xo3c3hzgsw"},{"post_id":"cipc8kw13000034xowxecct5j","tag_id":"cipc8kw1g000234xoitmk4x8w","_id":"cipc8kw1u000934xo232zjd99"},{"post_id":"cipc8kw1q000634xodn7cqy0v","tag_id":"cipc8kw1g000234xoitmk4x8w","_id":"cipc8kw1y000c34xog49fpf1p"},{"post_id":"cipc8kw1t000834xovypjpvpr","tag_id":"cipc8kw1g000234xoitmk4x8w","_id":"cipc8kw20000e34xoot46u8t2"},{"post_id":"cipc8kw1d000134xooiex1phz","tag_id":"cipc8kw1g000234xoitmk4x8w","_id":"cipc8kw22000g34xo3kz7g5el"},{"post_id":"cipc8kw1w000b34xocwuxx5j3","tag_id":"cipc8kw1g000234xoitmk4x8w","_id":"cipc8kw28000i34xobsir2sll"},{"post_id":"cipc8kw1z000d34xoaesg6ww9","tag_id":"cipc8kw1g000234xoitmk4x8w","_id":"cipc8kw29000k34xooifkh72w"},{"post_id":"cipc8kw1k000334xo0aptvihr","tag_id":"cipc8kw1g000234xoitmk4x8w","_id":"cipc8kw2b000m34xogghnogmu"},{"post_id":"cipc8kw20000f34xoivqbim84","tag_id":"cipc8kw1g000234xoitmk4x8w","_id":"cipc8kw2d000o34xoyjy8r27s"},{"post_id":"cipc8kw23000h34xofq3qlcn4","tag_id":"cipc8kw1g000234xoitmk4x8w","_id":"cipc8kw2f000q34xowyc6a3do"},{"post_id":"cipc8kw28000j34xols5bx3wd","tag_id":"cipc8kw1g000234xoitmk4x8w","_id":"cipc8kw2f000r34xoia0jaafe"},{"post_id":"cipc8kw2a000l34xooxonqub5","tag_id":"cipc8kw1g000234xoitmk4x8w","_id":"cipc8kw2g000s34xoc4kwje6i"},{"post_id":"cipc8kw2c000n34xobc3dha4j","tag_id":"cipc8kw1g000234xoitmk4x8w","_id":"cipc8kw2g000t34xo286tqriu"},{"post_id":"cipc8kw2d000p34xokrv39mgh","tag_id":"cipc8kw1g000234xoitmk4x8w","_id":"cipc8kw2h000u34xohpzmpy2x"}],"Tag":[{"name":"leetcode","_id":"cipc8kw1g000234xoitmk4x8w"}]}}